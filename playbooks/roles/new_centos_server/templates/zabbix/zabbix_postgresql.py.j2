#!/usr/bin/python3

import datetime
import time
import psycopg2
import argparse
import sys
import socket
import json
import re
from ZabbixSender import ZabbixSender, ZabbixPacket

"""
###################################################### GENERAL PART ######################################################
"""
zabbix_servers = [ 'zabbix.protrader.com'] 

#Init input variable
host = port = database = user = password = 'None'
parser = argparse.ArgumentParser()

#Set input variable
parser.add_argument("--host", help="PostgreSQL server host")
parser.add_argument("--port", help="PostgreSQL port")
parser.add_argument("--database", help="PostgreSQL database name")
parser.add_argument("--user", help="PostgreSQL username")
parser.add_argument("--password", help="PostgreSQL password")
parser.add_argument("--get_data", help="Get PostgreSQL settings")
parser.add_argument("--db_discovery", help="PostgreSQL databases discovery")
parser.add_argument("--db_status", help="Get PostgreSQL databases status")
parser.add_argument("--zabbix_item", help="Zabbix Item Name")
parser.add_argument("--client_discovery", help="Client discovery")

options = parser.parse_args()

#Set default values is variable not set
if options.host is None:
  options.host = '127.0.0.1'

if options.port is None:
  options.port = 5432

if options.user is None:
  options.user = 'postgres'

if options.password is None:
  options.password = 'postgres'

if options.database is None:
  options.database = 'postgres'

if options.get_data is None:
  options.get_data = False

if options.db_discovery is None:
  options.db_discovery = False

if options.get_data is None:
  options.db_status = False

#Convert PostgreSQL unit to bytes
def bytes_convert(value,unit):
  if unit == 'kB':
    return int(value)*1024
  elif unit == 'MB':
    return int(value)*1024*1000
  elif unit == '8kB':
    return int(value)*1024*8

#Send Zabbix packets function
def zabbix_send(key, value):
  packet = ZabbixPacket()
  packet.add(socket.gethostname(), key, value)
  for server in zabbix_servers:
    ZabbixSender(str(server), 10051).send(packet)

"""
###################################################### GET SETTINGS AND STATUS ######################################################
"""

try:
  if options.get_data:
    #Connect to database
    connect = psycopg2.connect(host=options.host, port=options.port, database=options.database, user=options.user, password=options.password)
    cursor = connect.cursor()

    #Get RDBMS settings
    cursor.execute("""SELECT name,setting,unit from pg_settings""")

    #Convert value to bytes
    pg_settings = {}
    for item in cursor:
      if item[2] is not None:
        pg_settings.update({item[0]:str(bytes_convert(item[1],item[2]))})
      else:
        pg_settings.update({item[0]:item[1]})

    #Get RDBMS status
    cursor.execute("""SELECT count(*) FROM pg_stat_activity""")
    pg_con_count = cursor.fetchall()[0][0]

    #Get users count
    cursor.execute("""SELECT count(*) FROM pg_user""")
    pg_user_count = cursor.fetchall()[0][0]

    #Get databases count
    cursor.execute("""SELECT count(*) FROM pg_database where not datistemplate and datallowconn and datname!='postgres'""")
    pg_db_count = cursor.fetchall()[0][0]

    #Get database state (in recovery/not recovery)
    cursor.execute("""SELECT pg_is_in_recovery()""")
    pg_recovery_status = cursor.fetchall()[0][0]

    #Get slaves count
    cursor.execute("""SELECT count(*) from pg_stat_replication""")
    pg_slave_count = cursor.fetchall()[0][0]

    #Get replica lag
    if pg_recovery_status:
      cursor.execute("""SELECT CASE WHEN pg_last_xlog_receive_location() = pg_last_xlog_replay_location() THEN 0  ELSE EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())::INTEGER END AS replication_lag""")
      pg_replica_lag = cursor.fetchall()[0][0]
      pg_server_role = "Slave"
    elif pg_slave_count > 0:
      pg_server_role = "Master"
      pg_replica_lag = 0
    else:
      pg_server_role = "Standalone"
      pg_replica_lag = 0  

    #Prepare PostgreSQL settings for sending
    packets_postgresql_settings = { "pgsql.settings.shared_buffers" : pg_settings['shared_buffers'] ,
       "pgsql.settings.work_mem" : pg_settings['work_mem'],
       "pgsql.settings.effective_cache_size" : pg_settings['effective_cache_size'],
       "pgsql.settings.maintenance_work_mem" : pg_settings['maintenance_work_mem'],
       "pgsql.settings.encoding" : pg_settings['client_encoding'],
       "pgsql.settings.timezone" : pg_settings['TimeZone'],
       "pgsql.settings.connections.max" : pg_settings['max_connections'],
       "pgsql.settings.role" : pg_server_role,
       "pgsql.version" : pg_settings['server_version']
      }

    #Prepare PostgreSQL status for sending
    packets_postgresql_status = { "pgsql.status.connection.summary" : pg_con_count,
                    "pgsql.status.replica.lag" :  pg_replica_lag,
                    "pgsql.user.count" : pg_user_count,
                    "pgsql.db.count" : pg_db_count,
      }

    for key in packets_postgresql_settings:
      zabbix_send(key, str(packets_postgresql_settings[key]))

    for key in packets_postgresql_status:
      zabbix_send(key, str(packets_postgresql_status[key]))

    print(1)
except Exception:
    print(0)

"""
###################################################### DISCOVERY DATABASES ######################################################
"""

if options.db_discovery:
  connect = psycopg2.connect(host=options.host, port=options.port, database=options.database, user=options.user, password=options.password)
  cursor = connect.cursor()
  #Get databases list
  cursor.execute("""SELECT datname FROM pg_database where not datistemplate and datallowconn and datname!='postgres'""")
  databases_tmp = cursor.fetchall()
  databases_list = []
  
  #Prepare databases list for zabbix
  for item in databases_tmp:
    databases_list.append({
                        "{#DBNAME}":item[0]
                    })

  pg_databases = {
      "data":databases_list
    }

  print(json.dumps(pg_databases))

"""
###################################################### GET DATABASE STATUS ######################################################
"""

if options.db_status:
  connect = psycopg2.connect(host=options.host, port=options.port, database='postgres', user=options.user, password=options.password)
  cursor = connect.cursor()
  #Get databases list
  cursor.execute("""SELECT pg_database_size(pg_database.datname) AS size FROM pg_database where datname=%(dbname)s""", {"dbname": options.database})
  pgsql_db_size = cursor.fetchall()[0][0]

  cursor.execute("""SELECT count(*) from pg_stat_activity where datname=%(dbname)s""", {"dbname": options.database})
  pgsql_db_con_count = cursor.fetchall()[0][0]

  cursor.execute("""SELECT count(*) from pg_stat_activity where datname=%(dbname)s""", {"dbname": options.database})
  pgsql_db_con_count = cursor.fetchall()[0][0]

  connect = psycopg2.connect(host=options.host, port=options.port, database=options.database, user=options.user, password=options.password)
  cursor = connect.cursor()

  cursor.execute("""SELECT tzas FROM dbappserv ORDER BY id DESC;""")
  app_timezone = cursor.fetchall()[0][0]

  #Prepare PostgreSQL database discovery for sending
  packets_postgresql_db_status = { "pgsql.db.size" : pgsql_db_size,
                                    "pgsql.db.con.count" : pgsql_db_con_count,
                                    "pgsql.app.timezone" : re.sub('[0-9+:()]', '', app_timezone)
    }

  if  options.zabbix_item in packets_postgresql_db_status:
    print(packets_postgresql_db_status[options.zabbix_item])
  else:
    print(0)

  
