#!/usr/bin/python3

#Author: Denis Avramenko
#Created for: PFSOFT LLC
#Creation date: 2017-03-07

from datetime import datetime, timedelta
import time
import argparse
import sys
import socket
import subprocess
import json
import humanfriendly
from pymongo import MongoClient
from ZabbixSender import ZabbixSender, ZabbixPacket

zabbix_servers = [ 'zabbix.protrader.com'] 

#Send Zabbix packets function
def zabbix_send(key, value):
  packet = ZabbixPacket()
  packet.add(socket.gethostname(), key, value)
  for server in zabbix_servers:
    ZabbixSender(str(server), 10051).send(packet)


#Init input variable
host = port =  'None'
parser = argparse.ArgumentParser()

#Set input variable
parser.add_argument("--host", help="MongoDB server host")
parser.add_argument("--port", help="MongoDB port")
parser.add_argument("--status", help="Get status of MongoDB")
parser.add_argument("--statistics", help="Get statistics of MongoDB")
parser.add_argument("--discovery", help="Discovery MongoDB databases")
parser.add_argument("--replica_status", help="Replica status")
parser.add_argument("--db_status", help="Database status")
parser.add_argument("--database", help="Database name")
parser.add_argument("--zabbix_item", help="Zabbix item name")

options = parser.parse_args()

#Set default values is variable not set
if options.port is None:
  options.port = 27017

if options.host is None:
  options.host = '127.0.0.1'

if options.host is None:
  options.status = False

if options.host is None:
  options.statistics = False

if options.host is None:
  options.discovery = False

if options.host is None:
  options.replica_status = False

if options.host is None:
  options.db_status = False

"""
###################################################### GET SETTINGS AND STATUS ######################################################
"""
if options.status:
  try:
  
    #Connection string to MongoDB
    connectionString = MongoClient("mongodb://" + options.host + ":" + str(options.port))
    db = connectionString["test"]

    mongodb_server_status = db.command("serverStatus")
    mongodb_dbs = connectionString.database_names()
  
    #Create Zabbix package
    packets_mongodb_server_status = { "mongodb.version" : mongodb_server_status["version"],
                                                                   "mongodb.uptime" : str(timedelta(seconds=mongodb_server_status["uptime"])),
                                                                   "mongodb.connections.current" : mongodb_server_status["connections"]["current"],
                                                                   "mongodb.connections.available" : mongodb_server_status["connections"]["available"],
                                                                   "mongodb.globalLock.activeClients.readers" : mongodb_server_status["globalLock"]["activeClients"]["readers"],
                                                                   "mongodb.globalLock.activeClients.writers" : mongodb_server_status["globalLock"]["activeClients"]["writers"],
                                                                   "mongodb.globalLock.currentQueue.readers" : mongodb_server_status["globalLock"]["currentQueue"]["readers"],
                                                                   "mongodb.globalLock.currentQueue.writes" : mongodb_server_status["globalLock"]["currentQueue"]["writers"],
                                                                   "mongodb.globalLock.currentQueue.total" : mongodb_server_status["globalLock"]["currentQueue"]["total"],
                                                                   "mongodb.wiredTiger.concurrentTransactions.write.available" : mongodb_server_status["wiredTiger"]["concurrentTransactions"]["write"]["available"],
                                                                   "mongodb.metrics.cursor.open.total" : mongodb_server_status["metrics"]["cursor"]["open"]["total"],
                                                                   "mongodb.metrics.cursor.open.timedOut" : mongodb_server_status["metrics"]["cursor"]["timedOut"],
                                                                   "mongodb.mem.resident" : str(int(mongodb_server_status["mem"]["resident"])*1024*1000),
                                                                   "mongodb.mem.virtual" : str(int(mongodb_server_status["mem"]["virtual"])*1024*1000),
                                                                   "mongodb.db.count" : len(mongodb_dbs)
       }
   
    #Send packets to Zabbix
    for key in packets_mongodb_server_status:
      zabbix_send(key, str(packets_mongodb_server_status[key]))

    print(1)
  except Exception as e:
    print(str(e))

###################################################### GET MONGOSTAT METRICS ######################################################

if options.statistics:
  try:
    #Connection string to MongoDB
    connectionString = MongoClient("mongodb://" + options.host + ":" + str(options.port))
    db = connectionString["test"]

    tmp_result = str(subprocess.Popen(["mongostat -n 1 1 --noheaders --host " + options.host], stdout=subprocess.PIPE, shell=True).communicate(timeout=15)).split()

    packets_mongodb_statistics = { "mongodb.network.bytesIn" : str(humanfriendly.parse_size(tmp_result[14])),
      "mongodb.network.bytesOut" : str(humanfriendly.parse_size(tmp_result[15])),
      "mongodb.opcounters.insert" : tmp_result[1],
      "mongodb.opcounters.query" : tmp_result[2],
      "mongodb.opcounters.update" : tmp_result[3],
      "mongodb.opcounters.delete" : tmp_result[4],
      }

    #Send packets to Zabbix
    for key in packets_mongodb_statistics:
      zabbix_send(key, str(packets_mongodb_statistics[key]))

    print(1)
  except Exception as e:
    print(0)

"""
###################################################### DISCOVERY ######################################################
"""
if options.discovery:
  try:
    #Connection string to MongoDB
    connectionString = MongoClient("mongodb://" + options.host + ":" + str(options.port))
    db = connectionString["test"]

    mongodb_dbs_tmp = connectionString.database_names()

    mongodb_list = []

    for item in mongodb_dbs_tmp:
      mongodb_list.append({
                        "{#DBNAME}":item
                    })

    mongodb_dbs = {
      "data":mongodb_list
    }
    print(json.dumps(mongodb_dbs))
  except Exception as e:
    print(str(e))

"""
###################################################### DB INFO ######################################################
"""
if options.db_status:
  try:
    #Connection string to MongoDB
    connectionString = MongoClient("mongodb://" + options.host + ":" + str(options.port))
    db = connectionString[options.database]
    mongodb_db_info = db.command("dbStats")
    packets_mongodb_db_stats={ "mongodb.db.storage.size" : mongodb_db_info["storageSize"],
                                                            "mongodb.db.data.size" : mongodb_db_info["dataSize"],
                                                            "mongodb.db.collections.count" : mongodb_db_info["collections"],
                                                            "mongodb.db.index.size" : mongodb_db_info["indexSize"],
                                                            "mongodb.db.objects.count" : mongodb_db_info["objects"],
    }
    if  options.zabbix_item in packets_mongodb_db_stats:
      print(packets_mongodb_db_stats[options.zabbix_item])
  except Exception as e:
    print(str(e))


"""
###################################################### REPLICA INFO ######################################################
"""
if options.replica_status:
  try:

    #Connection string to MongoDB
    connectionString = MongoClient("mongodb://" + options.host + ":" + str(options.port))
    db = connectionString["test"]
    replica_status=connectionString.admin.command('replSetGetStatus')
    current_status=replica_status["members"]
    
    #Get replica lag
    
    tmp_result = str(subprocess.Popen(["echo \"db.getReplicationInfo()\" | mongo --host " + options.host], stdout=subprocess.PIPE, shell=True).communicate(timeout=15)).split()
    
    tLast = datetime.strptime(tmp_result[27] + " " + tmp_result[28] + " " + tmp_result[29] + " " + tmp_result[30], '%b %d %Y %H:%M:%S')
    tNow = datetime.strptime(tmp_result[35] + " " + tmp_result[36] + " " + tmp_result[37] + " " + tmp_result[38], '%b %d %Y %H:%M:%S')
  
    replicaLag = time.mktime(tNow.timetuple()) - time.mktime(tLast.timetuple())
    

    for item in current_status:
      if 'self' in item:
        packets_mongodb_replica = { "mongodb.replica.name" : replica_status["set"],
                                                               "mongodb.replica.heartbeat" : replica_status["heartbeatIntervalMillis"],
                                                               "mongodb.replica.lag" : replicaLag,
      }
        for key in packets_mongodb_replica:
          zabbix_send(key, str(packets_mongodb_replica[key]))
        
        print(item["stateStr"])


  except Exception as e:
    print("STANDALONE")
